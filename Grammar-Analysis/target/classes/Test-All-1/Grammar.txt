以下是C语言的BNF文法：

<程序> ::= {<外部声明>}

<外部声明> ::= <函数定义> | <变量声明>

<函数定义> ::= <函数类型> <标识符> ( [<形式参数列表>] ) { [<函数体>] }

<函数类型> ::= <数据类型> | void

<形式参数列表> ::= <形式参数> {, <形式参数>}

<形式参数> ::= <数据类型> <标识符>

<变量声明> ::= <数据类型> <变量列表>

<变量列表> ::= <变量> {, <变量>}

<变量> ::= <标识符> [= <表达式>]

<函数体> ::= {<声明> | <语句>}

<声明> ::= <变量声明> | <函数定义>

<语句> ::= <表达式语句> | <复合语句> | <选择语句> | <迭代语句> | <跳转语句> | <标签语句>

<表达式语句> ::= [<表达式>] ;

<复合语句> ::= { {<声明> | <语句>} }

<选择语句> ::= if ( <表达式> ) <语句> [else <语句>]

<迭代语句> ::= while ( <表达式> ) <语句> | do <语句> while ( <表达式> ) | for ( [<表达式>] ; [<表达式>] ; [<表达式>] ) <语句>

<跳转语句> ::= goto <标识符> ; | continue ; | break ; | return [<表达式>] ;

<标签语句> ::= <标识符> : <语句>

<表达式> ::= <赋值表达式>

<赋值表达式> ::= <条件表达式> [= <赋值表达式>]

<条件表达式> ::= <逻辑或表达式> [? <表达式> : <条件表达式>]

<逻辑或表达式> ::= <逻辑与表达式> {|| <逻辑与表达式>}

<逻辑与表达式> ::= <相等表达式> {&& <相等表达式>}

<相等表达式> ::= <关系表达式> {(== | !=) <关系表达式>}

<关系表达式> ::= <加法表达式> {(> | < | >= | <=) <加法表达式>}

<加法表达式> ::= <乘法表达式> {(+ | -) <乘法表达式>}

<乘法表达式> ::= <一元表达式> {(* | / | %) <一元表达式>}

<一元表达式> ::= [+ | - | ! | ~] <后缀表达式>

<后缀表达式> ::= <主表达式> {[ <表达式> ] | ( [<参数列表>] ) | . <标识符> | -> <标识符>}

<参数列表> ::= <表达式> {, <表达式>}

<主表达式> ::= <标识符> | <常量> | ( <表达式> )

<常量> ::= <整数常量> | <字符常量> | <浮点常量>

<整数常量> ::= <十进制常量> | <八进制常量> | <十六进制常量>

<字符常量> ::= ' <字符> '

<浮点常量> ::= <数字> [. <数字>] [<指数部分>]

<指数部分> ::= ( e | E ) [+ | -] <数字>

<数据类型> ::= char | short | int | long | float | double | signed | unsigned 



注意：以上的符号 [] 表示括号内的内容是可选的， {...} 表示花括号内的内容可以重复任意多次， | 表示或的关系。在实际使用中，为了避免产生二义性，可能需要重新组织语法规则并添加额外的约束条件。
